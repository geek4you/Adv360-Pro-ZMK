#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            global-quick-tap;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 71 72 73 74 75 35 36 37 38 52 53 65 66 67 68 69 70 71>;
            hold-trigger-on-release;
        };

        cpy_pst: cpy_pst {
            compatible = "zmk,behavior-tap-dance";
            label = "CPY_PST";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;

            tapping-term-ms = <125>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            global-quick-tap;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 38 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 69 70>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        sleep {
            bindings = <&kt LA(LG(C_EJECT))>;
            key-positions = <0 13>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC                      &mt EXCLAMATION NUMBER_1  &mt AT_SIGN NUMBER_2  &mt HASH NUMBER_3  &mt DOLLAR NUMBER_4  &mt PERCENT NUMBER_5         &kp F11                                                                                         &kp F12                        &mt CARET NUMBER_6           &mt AMPERSAND NUMBER_7  &mt ASTERISK NUMBER_8  &mt LEFT_PARENTHESIS NUMBER_9  &mt RIGHT_PARENTHESIS NUMBER_0  &caps_word
&kp TAB                      &kp Q                     &kp W                 &kp F              &kp P                &kp B                        &mt LEFT_BRACE LEFT_BRACKET                                                                     &mt RIGHT_BRACE RIGHT_BRACKET  &kp J                        &kp L                   &kp U                  &kp Y                          &mt LS(SEMI) SEMICOLON          &kp GRAVE
&kp DEL                      &hml LCTRL A              &hml LEFT_ALT R       &hml LGUI S        &hml LSHIFT T        &hml LS(LC(LG(LEFT_ALT))) G  &kp MINUS                    &kp LG(C)  &kp LG(V)             &kp LS(LG(C))      &kp RIGHT_ALT  &kp EQUAL                      &hmr LS(LC(LG(LEFT_ALT))) M  &hmr RIGHT_SHIFT N      &hmr LEFT_GUI E        &hmr LEFT_ALT I                &hmr RCTRL O                    &kp BSPC
&mt LEFT_SHIFT SINGLE_QUOTE  &kp Z                     &kp X                 &kp C              &kp D                &kp V                                                                &kp LS(LG(LBKT))      &kp LS(LG(RBKT))                                                 &kp K                        &kp H                   &mt LESS_THAN COMMA    &mt GREATER_THAN PERIOD        &mt QUESTION FSLH               &mt RIGHT_SHIFT DOUBLE_QUOTES
&mo 1                        &kp LG(LEFT_ARROW)        &kp PG_DN             &kp PG_UP          &kp LG(RIGHT)                                     &mo 2                        &kp SPACE  &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES  &kp ENTER      &kp LS(LA(LC(LG(SPACE))))                                   &kp LEFT                &kp DOWN               &kp UP                         &kp RIGHT                       &mt TILDE GRAVE
            >;
        };

        sys {
            bindings = <
&bootloader  &trans  &trans  &trans  &trans  &trans  &trans                                          &trans           &trans        &trans        &trans             &trans        &trans        &bootloader
&trans       &trans  &trans  &trans  &trans  &trans  &trans                                          &trans           &trans        &trans        &trans             &trans        &trans        &trans
&trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans      &bt BT_CLR       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans       &trans  &trans  &trans  &trans  &trans                  &trans      &trans                               &trans        &trans        &trans             &trans        &trans        &trans
&trans       &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &bl BL_TOG  &rgb_ug RGB_TOG                &kp C_PREV    &kp C_VOLUME_DOWN  &kp C_VOL_UP  &kp C_NEXT    &trans
            >;

            label = "sys";
        };

        num {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                            &trans  &kp LBKT      &kp RBKT                   &kp LEFT_PARENTHESIS       &kp RIGHT_PARENTHESIS      &kp LS(LBKT)  &kp LS(RBKT)
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                            &trans  &kp ASTERISK  &mt LS(NUMBER_7) NUMBER_7  &mt LS(NUMBER_8) NUMBER_8  &mt LS(NUMBER_9) NUMBER_9  &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans        &trans  &kp PLUS      &mt LS(NUMBER_4) NUMBER_4  &mt LS(NUMBER_5) NUMBER_5  &mt LS(NUMBER_6) NUMBER_6  &kp EQUAL     &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                        &kp MINUS     &mt LS(NUMBER_1) NUMBER_1  &mt LS(NUMBER_2) NUMBER_2  &mt LS(NUMBER_3) NUMBER_3  &trans        &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &kp NUMBER_0  &trans                &trans                     &trans                     &trans                     &trans        &trans
            >;

            label = "num";
        };
    };
};
